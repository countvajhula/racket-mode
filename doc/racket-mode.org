-*- mode:org ; mode:visual-line -*-

#+OPTIONS: ':t toc:t author:t email:t H:4

#+MACRO: version 0.1
#+MACRO: updated last updated 2019-05-13

#+MACRO: kbd @@texinfo:@kbd{$1}@@ @@html:<kbd>$1</kbd>@@

#+TITLE: Racket Mode {{{version}}}
#+AUTHOR: Greg Hendershott
#+EMAIL: racket@greghendershott.com
#+LANGUAGE: en

#+TEXINFO_FILENAME: racket-mode.info
#+TEXINFO_HEADER: @syncodeindex pg cp

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Racket Mode: (racket)
#+TEXINFO_DIR_DESC: Edit and REPL major modes for Racket lang

#+TEXINFO_PRINTED_TITLE: Racket Mode

* Copying
:PROPERTIES:
:COPYING:  t
:END:

This manual is for Racket Mode (version {{{version}}},
{{{updated}}}).

Copyright @@texinfo:@copyright{}@@ 2019 Greg Hendershott.

#+BEGIN_QUOTE
Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, with no Front-Cover Texts,
and with no Back-Cover Texts.  A copy of the license is included in
the section entitled "GNU Free Documentation License".
#+END_QUOTE

* Introduction
Racket Mode consists of a variety of Emacs major and minor modes, including:

- ~racket-mode~: A major mode for editing ~.rkt~ files.

- ~racket-repl-mode~: A major mode for a Racket REPL. This uses a "back end server" written in Racket, which is responsible for running files and implementing commands that cannot be implemented in Emacs Lisp. The Racket code for this is delivered as part of the Emacs package (it is /not/ a separate Racket package that you would need to install and worry about keeping in sync wiht the Emacs package).

- A variety of other major and minor modes support various specific features, such as ~racket-logger-mode~, ~racket-check-syntax-mode~, and so on.

* Install

The recommended way to use Racket Mode is to install the package from [[https://melpa.org/][MELPA]].

** Configure Emacs to use MELPA
To use MELPA:

- Add the following to your =~/.emacs= or =~/.emacs.d/init.el=:

#+BEGIN_SRC lisp
(require 'package)
(add-to-list 'package-archives
              '("melpa" . "https://melpa.org/packages/")
              t)
#+END_SRC

- Restart Emacs.

- Type {{{kbd(M-x)}}} ~package-refresh-contents~ {{{kbd(RET)}}}.

** Install Racket Mode
When Emacs is configured to use MELPA, simply type {{{kbd(M-x)}}} =package-install= {{{kbd(RET)}}} =racket-mode= {{{kbd(RET)}}}.

** Minimal Racket
If you have installed the minimal Racket distribution (for example by using the [[https://github.com/Homebrew/homebrew-core/blob/master/Formula/minimal-racket.rb][homebrew formula]]: racket-mode needs some additional packages (like ~errortrace~ and ~macro-debugger~). A simple way to get all these packages is to install the ~drracket~ Racket package. In a command shell:

#+BEGIN_SRC shell
raco pkg install drracket
#+END_SRC

* Uninstall
To uninstall Racket Mode, simply type {{{kbd(M-x)}}} ~package-delete~ {{{kbd(RET)}}} ~racket-mode~ {{{kbd(RET)}}}.

You should probably also exit and restart Emacs.

* Update

Be aware that updating an Emacs package doesn't necessarily fully update Emacs' state. (One example symptom: an "invalid function" error message.)

After updating the package, you might need to restart Emacs.

In some cases, you might even need to:

1. Uninstall Racket Mode.

2. Exit and restart Emacs.

3. Install Racket Mode.

* Configure
To start, there is only one [variable](Reference.md#variables) you /might/ need to set:

- ~racket-program~ is the name or pathname of the Racket executable. It defaults to ~Racket.exe~ on Windows else ~racket~.

On Windows or Linux, this default will probably work for you.

On macOS, downloading Racket doesn't add its ~bin~ directory to your ~PATH~. Even after you add it, GUI Emacs doesn't automatically use your path (unless you use the handy [[https://melpa.org/#/exec-path-from-shell][exec-path-from-shell]] package). Therefore you may want to set ~racket-program~ to a full pathname like ~/usr/racket/bin/racket~.

You can ~setq~ this directly in your Emacs init file (=~/.emacs= or =~/.emacs.d/init.el=), or, use {{{kbd(M-x)}}} ~customize~, as you prefer.

** Start faster
You can use {{{kbd(M-x)}}} ~racket-mode-start-faster~ to make the Racket REPL start faster. @@texinfo:@xref{racket-mode-start-faster}@@.

** Key bindings
To customize things like key bindings, you can use ~racket-mode-hook~ in your Emacs init file. For example, although {{{kbd(F5)}}} and {{{kbd(C-c C-c)}}} are bound by default to the ~racket-run~ command, let's say you wanted {{{kbd(C-c r)}}} to be an additional binding:

#+BEGIN_SRC lisp
(add-hook 'racket-mode-hook
          (lambda ()
            (define-key racket-mode-map (kbd "C-c r") 'racket-run)))

#+END_SRC

** Unicode input method
An optional Emacs input method, ~racket-unicode~, lets you easily type various Unicode symbols that might be useful when writing Racket code.

To automatically enable the ~racket-unicode~ input method in ~racket-mode~ and ~racket-repl-mode~ buffers, put the following code in your Emacs init file:

#+BEGIN_SRC lisp
(add-hook 'racket-mode-hook      #'racket-unicode-input-method-enable)
(add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)
#+END_SRC

@@texinfo:@xref{racket-unicode-input-method-enable}@@.

** Completion

The usual ~complete-symbol~ --- bound by default to {{{kbd(C-M-i)}}} --- works, drawing on all symbols in the current Racket namespace.

#+BEGIN_QUOTE
**Tip:** When you first visit a ~.rkt~ file, or after you change its ~require~ forms, you may need to {{{kbd(M-x)}}} @@texinfo:@ref{racket-run}@@ again. Doing so makes the symbols available. (Otherwise, you may get "stale" symbols, or only symbols from ~racket/base~.)
#+END_QUOTE

To have {{{kbd(TAB)}}} do completion as well as indent, add the following to your Emacs init file:

#+BEGIN_SRC lisp
(setq tab-always-indent 'complete)
#+END_SRC

This changes the behavior of Emacs' standard ~indent-for-tab-command~, to which {{{kbd(TAB)}}} is bound by default in the racket-mode edit and REPL modes.

** Font-lock (syntax highlighting)

Font-lock (as Emacs calls syntax highlighting) can be controlled using the variable @@texinfo:@ref{Emacs,,font-lock-maximum-decoration}@@, which defaults to ~t~ (maximum). You can set it to a number, where 0 is the lowest level. You can even supply an association list to specify different values for different major modes.

Historically you might choose a lower level for speed. These days you might do so because you prefer a simpler appearance.

Racket-mode supports four, increasing levels of font-lock:

| Level | Description                                                                                                                                                                              |
|     0 | Just strings, comments, and ~#lang~.                                                                                                                                                     |
|     1 | ~#:keyword~ and self-evaluating literals like numbers, quoted symbols (including using pipe delimiters), regular expressions.                                                            |
|     2 | Identifiers in ~define~-like and ~let~-like forms.                                                                                                                                       |
|     3 | Identifiers provided by ~racket~, ~typed/racket~, ~racket/syntax~, and ~syntax/parse~. (This level effectively treats Racket as a language, instead of a language for making languages.) |

** paredit

You may want to add keybindings to ~paredit-mode-map~:

- Bind the curly brace keys to ~paredit-open-curly~ and ~paredit-close-curly~.

- Bind whatever keys you prefer for ~paredit-wrap-square~ and ~paredit-wrap-curly~.

For example, with [[https://melpa.org/#/use-package][~use-package~]]:

#+BEGIN_SRC lisp
(use-package paredit
  :ensure t
  :config
  (dolist (m '(emacs-lisp-mode-hook
               racket-mode-hook
               racket-repl-mode-hook))
    (add-hook m #'paredit-mode))
  (bind-keys :map paredit-mode-map
             ("{"   . paredit-open-curly)
             ("}"   . paredit-close-curly))
  (unless terminal-frame
    (bind-keys :map paredit-mode-map
               ("M-[" . paredit-wrap-square)
               ("M-{" . paredit-wrap-curly))))
#+END_SRC

** smartparens

To use the default configuration that smartparens provides for Lisp modes generally and for racket-mode specifically, add to your Emacs init file:

#+BEGIN_SRC lisp
(require 'smartparens-config)
#+END_SRC

** eldoc

By default racket-mode sets ~eldoc-documentation-function~ to ~nil~ --- no ~eldoc-mode~ support. You may set it to ~racket-eldoc-function~ in a ~racket-mode-hook~ if you really want to use ~eldoc-mode~ with Racket. But it is not a very satisfying experience because Racket is not a very "eldoc-friendly" language. Although racket-mode attempts to discover argument lists, contracts, or types this doesn't work in many common cases:

- Many Racket primitives are defined in ~#%kernel~ or ~#%runtime~. There's no easy way to determine their argument lists. Most do not ~provide~ a contract.

- Many of the interesting Racket forms are syntax (macros) not functions. There's no easy way to determine their "argument lists".

A more satisfying experience is to use @@texinfo:@ref{racket-describe}@@ or @@texinfo:@ref{racket-doc}@@.

* Reference
The following sections are generated from the doc strings for each command, variable, or face. (As a result, some of the formatting might not be quite as nice or correct as the previous sections.)

You can also view these by using the normal Emacs help mechanism:

- {{{kbd(C-h f)}}} and enter the name of a command.
- {{{kbd(C-h v)}}} and ente the name of a variable.

#+INCLUDE: reference.org
* Index
:PROPERTIES:
:INDEX:    cp
:END:
